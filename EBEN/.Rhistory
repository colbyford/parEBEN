fisher.test(rbind(c(1,14),c(13,2)))
fisher.test(rbind(c(1,14),c(13,2)),alternative = "less")
fisher.test(rbind(c(1,14),c(13,2)),alternative = "equal")
fisher.test(rbind(c(1,14),c(13,2)))
qf(0.05,2,12)
qf(0.05,2,12,lower.tail=F)
1+2+5+10+20
38/6
0+9+21+47+105+213
395/6
x <- matrix(rnorm(100), nrow = 5)
dist(x)
dist(x, diag = TRUE)
dist(x, upper = TRUE)
m <- as.matrix(dist(x))
d <- as.dist(m)
x
install.packages(reshape2)
install.packages('reshape2')
library(reshape2)
data <- as.data.frame(rbind(c('a','b',1),c('b',))
)
data <- as.data.frame(rbind(c('a','b',1),c('b','a',2),c('a','a',5),c('a','c',10)))
View(data)
?cast
#Air quality example
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
acast(aqm, day ~ month ~ variable)
acast(aqm, month ~ variable, mean)
acast(aqm, month ~ variable, mean, margins = TRUE)
dcast(aqm, month ~ variable, mean, margins = c("month", "variable"))
rm(aqm)
rm(airquality)
View(data)
data.frame(a=(1,2,3))
data.frame(a=c(1,2,3))
data.frame(a=c(1,2,3),b=c(4,5,6))
data <- data.frame(from = c('a','b','a','a'), to = c('b','a','a','c'), fatalities = c(1,2,5,10))
View(data)
acast(data,from~to~fatalities)
as.data.frame(acast(data,from~to~fatalities))
?matrix
is.matrix(as.matrix(1:10))
!is.matrix(warpbreaks)  # data.frame, NOT matrix!
warpbreaks[1:10,]
as.matrix(warpbreaks[1:10,])
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
View(mdat)
?random
??random
irnorm(1,count=100)
library(iterators)
irnorm(1,count=100)
library(iterators)
irnorm(1,count=100)
.Random.seed <- c(rng.kind, n1, n2, \dots)
RNGkind(kind = NULL, normal.kind = NULL)
RNGversion(vstr)
set.seed(seed, kind = NULL, normal.kind = NULL)
?qqplot
round(rchisq(30,2))
round(rnorm(30,2))
round(rchisq(30,2))
round(rchisq(30,2))
round(rchisq(30,3))
round(rchisq(30,5))
,
data <- data.frame(decade1 = round(rchisq(30,2)),
decade2 = round(rchisq(30,5))
)
View(data)
data <- data.frame(decade1 = round(rchisq(100,2)),
decade2 = round(rchisq(300,5))
)
decade1 <- round(rchisq(100,2))
decade2 <- round(rchisq(300,5))
?qqplot
qqplot(decade1,decade2)
qqplot(decade1,decade2, distribution = qnorm)
qqline(decade1, datax = FALSE, distribution = qnorm,
probs = c(0.25, 0.75), qtype = 7, ...)
qqline(decade1, datax = FALSE, distribution = qnorm,
probs = c(0.25, 0.75), qtype = 7)
qqline(decade1, datax = TRUE, distribution = qnorm,
probs = c(0.25, 0.75), qtype = 7)
qqline(decade1, datax = FALSE, distribution = qnorm,
probs = c(0.25, 0.75), qtype = 6)
qqline(decade1, datax = FALSE, distribution = qnorm, probs = c(0.25, 0.75))
qqplot(decade1,decade2)
qqplot(decade1,decade2, xlim = c(0,20), ylim = c(0,20))
qqline(decade1, datax = FALSE, distribution = qnorm, probs = c(0.25, 0.75))
max(c(decade1,decade2))
qqplot(decade1,decade2, xlim = c(0,max(c(decade1,decade2))), ylim = c(0,max(c(decade1,decade2))))
qqline(decade1,distribution = qnorm)
qqline(decade2,distribution = qnorm)
abline()
abline(0, 1)
require(ggplot2)
install.packages("ggplot2")
require(ggplot2)
g = ggplot()
+ geom_point(aes(x=decade1, y=decade2))
g = ggplot() + geom_point(aes(x=decade1, y=decade2))
g
##Generate Random Data
#Each record is in instance that captures the number of AMR genes
decade1 <- round(rchisq(100,2))
decade2 <- round(rchisq(300,5))
##Plot the data
#Generate plot with axes bound to maximum value in data
qqplot(decade1,decade2, xlim = c(0,max(c(decade1,decade2))), ylim = c(0,max(c(decade1,decade2))))
#Add y=x line for comparison
abline(0, 1)
##Generate Random Data
#Each record is in instance that captures the number of AMR genes
decade1 <- round(rchisq(100,2))
decade2 <- round(rchisq(300,5))
##Plot the data
#Generate plot with axes bound to maximum value in data
qqplot(decade1,decade2, xlim = c(0,max(c(decade1,decade2))), ylim = c(0,max(c(decade1,decade2))))
#Add y=x line for comparison
abline(0, 1)
##Generate Random Data
#Each record is in instance that captures the number of AMR genes
decade1 <- round(rchisq(100,2))
decade2 <- round(rchisq(300,5))
##Plot the data
#Generate plot with axes bound to maximum value in data
qqplot(decade1,decade2, xlim = c(0,max(c(decade1,decade2))), ylim = c(0,max(c(decade1,decade2))))
#Add y=x line for comparison
abline(0, 1)
library(RevoScaleR)
detectCores()
??cores
parallel::detectCores()
parallel::detectCores(logical=TRUE)
parallel::detectCores(logical=FALSE)
getwd()
setwd("../Desktop/EBEN")
load("C:/Users/Colby Ford/Desktop/EBEN/data/BASISbinomial.rda")
View(BASISbinomial)
EBelasticNet.Binomial <-
function(BASIS,Target,lambda,alpha,Epis = "no",verbose = 0){
N 				= nrow(BASIS);
K 				= ncol(BASIS);
if (verbose>0) 	cat("EBEN Logistic Model, NE prior,Epis: ",Epis,"\n");
if(Epis == "yes"){
N_effect 		= 2*K;
Beta 			= rep(0,N_effect *4);
#dyn.load("fEBBinaryNeFull.dll")
output<-.C("ElasticNetBinaryNEfull",
BASIS 	= as.double(BASIS),
Target 	= as.double(Target),
lambda 	= as.double(lambda),
alpha 	= as.double(alpha),
logLikelihood = as.double(0),
Beta 		= as.double(Beta),
WaldScore 	= as.double(0),
Intercept 	= as.double(rep(0,2)),
N 		= as.integer(N),
K 		= as.integer(K),
verbose = as.integer(verbose),
bMax 		= as.integer(N_effect),
PACKAGE="EBEN");
#dyn.unload("fEBBinaryNeFull.dll")
} else {
N_effect 		= K;
Beta 			= rep(0,N_effect *4);
#dyn.load("fEBBinaryNEmainEff.dll")
#dyn.load("ElasticNetBinaryNEmainEff.dll")
output<-.C("ElasticNetBinaryNEmainEff",
BASIS 	= as.double(BASIS),
Target 	= as.double(Target),
lamda 	= as.double(lambda),
alpha 	= as.double(alpha),
logLikelihood = as.double(0),
Beta 		= as.double(Beta),
WaldScore 	= as.double(0),
Intercept 	= as.double(rep(0,2)),
N 		= as.integer(N),
K 		= as.integer(K),
verbose = as.integer(verbose),
bMax 		= as.integer(N_effect),
PACKAGE="EBEN");
#dyn.unload("fEBBinaryNEmainEff.dll")
#dyn.unload("ElasticNetBinaryNEmainEff.dll")
}
result 			= matrix(output$Beta,N_effect,4);
ToKeep 			= which(result[,3]!=0);
if(length(ToKeep)==0) {  Blup = matrix(0,1,4)
}else	Blup 	 = result[ToKeep,,drop= FALSE];
if(Epis == "yes"){
blupMain 		= Blup[Blup[,1] ==Blup[,2],];
nMain 			= length(blupMain)/4;
blupMain 		= matrix(blupMain,nMain,4);
#
blupEpis 		= Blup[Blup[,1] !=Blup[,2],];
nEpis 			= length(blupEpis)/4;
blupEpis 		= matrix(blupEpis,nEpis,4);
order1 			= order(blupMain[,1]);
order2 			= order(blupEpis[,1]);
Blup 			= rbind(blupMain[order1,],blupEpis[order2,]);
}
#t-test:
t 				= abs(Blup[,3])/(sqrt(Blup[,4])+ 1e-20);
pvalue 			= 2*(1- pt(t,df=(N-1)));
Blup 			= cbind(Blup,t,pvalue); 			#M x 6
#col1: index1
#col2: index2
#col3: beta
#col4: variance
#col5: t-value
#col6: p-value
fEBresult 			<- list(Blup,output$logLikelihood,output$WaldScore,output$Intercept,lambda,alpha);
rm(list= "output")
names(fEBresult)		<-c("weight","logLikelihood","WaldScore","Intercept","lambda","alpha")
return(fEBresult)
}
